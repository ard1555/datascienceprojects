"0",""
"0","subset.1 <- subset(dataset, NBAMEMG == 1 && DGRDG != 1)"
"0","subset.2 <- subset(dataset, NBAMEMG == 2 && DGRDG != 1)"
"0","subset.3 <- subset(dataset, NBAMEMG == 3 && DGRDG != 1)"
"0","subset.4 <- subset(dataset, NBAMEMG == 4 && DGRDG != 1)"
"0","subset.5 <- subset(dataset, NBAMEMG == 5 && DGRDG != 1)"
"0","subset.6 <- subset(dataset, NBAMEMG == 6 && DGRDG != 1)"
"0","subset.7 <- subset(dataset, NBAMEMG == 7 && DGRDG != 1)"
"0",""
"0","myData <- list(subset.1, subset.2, subset.3, subset.4, subset.5, subset.6, subset.7)"
"0",""
"0",""
"0","#compute the actual data deviation"
"0","data.deviation <-function(data){"
"0","  "
"0","  retention.rates <- list()"
"0","  count <- 0"
"0","  sum <- 0"
"0","  average <- 0"
"0","  deviation <- 0"
"0","  "
"0","  for(i in 1:7){"
"0","      # ret1 <- match(myData[[i]]$NDGMEMG, myData[[i]]$NBAMEMG)"
"0","      # print(ret1)"
"0","      len <- sum(as.integer(myData[[i]]$NDGMEMG) == as.integer(myData[[i]]$NBAMEMG))"
"0","      retention.rates[[i]] <- len / nrow(myData[[i]])"
"0","  }"
"0","  "
"0","  print(retention.rates)"
"0","  "
"0","  #Get the average of retention rates"
"0","  for(i in 1:7){"
"0","    sum <- sum + retention.rates[[i]]"
"0","  }"
"0","  "
"0","  average <- sum / 7"
"0","  "
"0","  #Get the summation of the absolute values of the difference between each subset's retention and the average value"
"0","  for(i in 1:7){"
"0","    deviation <- deviation + abs(retention.rates[[i]]-average)"
"0","  }"
"0","  "
"0","  return(deviation)"
"0","}"
"0",""
"0","#--- permutation test#we will: shuffle the use column, and then compute D."
"0",""
"0","shuffle <-function(){"
"0","  shuffle.subset.1 <- sample(subset.1$NBAMEMG)"
"0","  shuffle.subset.2 <- sample(subset.2$NBAMEMG)"
"0","  shuffle.subset.3 <- sample(subset.3$NBAMEMG)"
"0","  shuffle.subset.4 <- sample(subset.4$NBAMEMG)"
"0","  shuffle.subset.5 <- sample(subset.5$NBAMEMG)"
"0","  shuffle.subset.6 <- sample(subset.6$NBAMEMG)"
"0","  shuffle.subset.7 <- sample(subset.7$NBAMEMG)"
"0","  "
"0","  "
"0","  shuffled.Data <- list(shuffle.subset.1, shuffle.subset.2, shuffle.subset.3, shuffle.subset.4, shuffle.subset.5, shuffle.subset.6, shuffle.subset.7)"
"0","  "
"0","  "
"0","  # use.shuffle <-sample(data$use)"
"0","  # #compute total use by age from the shuffled use"
"0","  # use.by.age <-by(use.shuffle,data$age.group,sum)"
"0","  # #turn this into a rate"
"0","  # rate.by.age <- use.by.age/counts"
"0","  # #compute deviation"
"0","  # average.rate <-sum(use.by.age)/sum(counts)"
"0","  # deviation <-sum(abs(rate.by.age-average.rate))return(deviation)"
"0","  }"
"0",""
"0","#run many times"
"0","# m = 10**4"
"0","# D = replicate(m,shuffle())"
"0",""
"0","#calculate the actual data deviation"
"0","d = data.deviation(dataset)"
"1","[[1]]
"
"1","[1]"
"1"," NaN"
"1","
"
"1","
"
"1","[[2]]
"
"1","[1]"
"1"," NaN"
"1","
"
"1","
"
"1","[[3]]
"
"1","[1]"
"1"," 0.7204738"
"1","
"
"1","
"
"1","[[4]]
"
"1","[1]"
"1"," NaN"
"1","
"
"1","
"
"1","[[5]]
"
"1","[1]"
"1"," NaN"
"1","
"
"1","
"
"1","[[6]]
"
"1","[1]"
"1"," NaN"
"1","
"
"1","
"
"1","[[7]]
"
"1","[1]"
"1"," NaN"
"1","
"
"1","
"
"0","p.value <-sum(D>=d)/m"
"2","Error in D >= d : 
  comparison (5) is possible only for atomic and list types
"
